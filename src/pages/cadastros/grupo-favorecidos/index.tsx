
import { useState } from "react";
import { GrupoFavorecido } from "@/types";
import { Button } from "@/components/ui/button";
import { PlusCircle } from "lucide-react";
import { GrupoFavorecidosForm } from "@/components/grupo-favorecidos/grupo-favorecidos-form";
import { GrupoFavorecidosTable } from "@/components/grupo-favorecidos/grupo-favorecidos-table";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { toast } from "sonner";

// Mock data - in a real app, this would come from a database
const initialGrupos: GrupoFavorecido[] = [
  {
    id: "1",
    nome: "Fornecedores Principais",
    status: "ativo",
    createdAt: new Date(),
    updatedAt: new Date(),
  },
  {
    id: "2",
    nome: "Clientes VIP",
    status: "ativo",
    createdAt: new Date(),
    updatedAt: new Date(),
  },
  {
    id: "3",
    nome: "Fornecedores Secundários",
    status: "inativo",
    createdAt: new Date(),
    updatedAt: new Date(),
  },
];

export default function GrupoFavorecidosPage() {
  const [grupos, setGrupos] = useState<GrupoFavorecido[]>(initialGrupos);
  const [isDialogOpen, setIsDialogOpen] = useState(false);
  const [editingGrupo, setEditingGrupo] = useState<GrupoFavorecido | undefined>(
    undefined
  );

  const handleOpenDialog = (grupo?: GrupoFavorecido) => {
    setEditingGrupo(grupo);
    setIsDialogOpen(true);
  };

  const handleCloseDialog = () => {
    setEditingGrupo(undefined);
    setIsDialogOpen(false);
  };

  const handleSubmit = (data: { nome: string; status: "ativo" | "inativo" }) => {
    if (editingGrupo) {
      // Update existing grupo
      setGrupos((prev) =>
        prev.map((g) =>
          g.id === editingGrupo.id
            ? {
                ...g,
                nome: data.nome,
                status: data.status,
                updatedAt: new Date(),
              }
            : g
        )
      );
      toast.success("Grupo de favorecidos atualizado com sucesso!");
    } else {
      // Create new grupo
      const newGrupo: GrupoFavorecido = {
        id: `${Date.now()}`, // In a real app, this would be generated by the backend
        nome: data.nome,
        status: data.status,
        createdAt: new Date(),
        updatedAt: new Date(),
      };
      setGrupos((prev) => [...prev, newGrupo]);
      toast.success("Grupo de favorecidos criado com sucesso!");
    }
    handleCloseDialog();
  };

  const handleDelete = (id: string) => {
    setGrupos((prev) => prev.filter((grupo) => grupo.id !== id));
    toast.success("Grupo de favorecidos excluído com sucesso!");
  };

  return (
    <div className="space-y-4">
      <div className="flex items-center justify-between">
        <h1 className="text-2xl font-bold">Grupo de Favorecidos</h1>
        <Button onClick={() => handleOpenDialog()}>
          <PlusCircle className="mr-2 h-4 w-4" />
          Novo Grupo
        </Button>
      </div>

      <Card>
        <CardHeader>
          <CardTitle>Grupos de Favorecidos</CardTitle>
          <CardDescription>
            Gerencie os grupos de favorecidos do sistema
          </CardDescription>
        </CardHeader>
        <CardContent>
          <GrupoFavorecidosTable
            grupos={grupos}
            onEdit={handleOpenDialog}
            onDelete={handleDelete}
          />
        </CardContent>
      </Card>

      <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>
        <DialogContent className="sm:max-w-[500px]">
          <DialogHeader>
            <DialogTitle>
              {editingGrupo
                ? "Editar Grupo de Favorecidos"
                : "Novo Grupo de Favorecidos"}
            </DialogTitle>
          </DialogHeader>
          <GrupoFavorecidosForm
            grupo={editingGrupo}
            onSubmit={handleSubmit}
            onCancel={handleCloseDialog}
          />
        </DialogContent>
      </Dialog>
    </div>
  );
}
